define(["angular","floatl"],function(t,e){"use strict";function n(t){return t&&"object"==typeof t&&"default"in t?t.default:t}function l(t,e){return e={exports:{}},t(e,e.exports),e.exports}t="default"in t?t.default:t,e="default"in e?e.default:e;var a="ng-viva-ui",r=l(function(t){t.exports={hifen2CamelCase:function(t,e){var n=t.split("-");return n[0]=n[0].charAt(0)[e?"toUpperCase":"toLowerCase"]()+n[0].slice(1),n[0]+n.slice(1).map(function(t){return t.charAt(0).toUpperCase()+t.slice(1)}).join("")}}});n(r);var s=r.hifen2CamelCase,i=s(a),o=(function(){try{return t.module(i)}catch(e){return t.module(i,[])}}(),i+".label"),u=function(){try{return t.module(o)}catch(e){return t.module(o,[i])}}(),c='<div class="floatl">\n  <ng-transclude></ng-transclude>\n</div>\n',f=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")},b=function(){function t(t,e){for(var n=0;n<e.length;n++){var l=e[n];l.enumerable=l.enumerable||!1,l.configurable=!0,"value"in l&&(l.writable=!0),Object.defineProperty(t,l.key,l)}}return function(e,n,l){return n&&t(e.prototype,n),l&&t(e,l),e}}(),d=function(){function t(e,n,l,a){f(this,t),this.$attrs=e,this.$input=n,this.$label=l,this.$ctrl=a,this.setLabelClass=this.setLabelClass.bind(this),this.setText=this.setText.bind(this)}return b(t,[{key:"setLabelClass",value:function(t){this.$ctrl.labelClass=t}},{key:"setText",value:function(){this.$label.text(this.$attrs.label||this.$input.attr("placeholder"))}}]),t}();return u.directive("vivaUiFloatLabel",["$compile",function(t){return{template:c,restrict:"E",scope:{},transclude:!0,controller:function(){},controllerAs:"$floatLabel",link:{post:function(n,l,a,r){var s=l.children(),i=l.find("ng-transclude"),o=l.find("input"),u=t('<label class="floatl__label" ng-class="[$floatLabel.labelClass]">')(n),c=new d(a,o,u,r);o.addClass("floatl__input"),s[0].insertBefore(u[0],i[0]),a.$observe("labelClass",c.setLabelClass),a.$observe("label",c.setText),n.$watch(function(){return o.attr("placeholder")},c.setText),e.call(Object.create(e.prototype),s[0])}}}}]),u});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjpudWxsLCJzb3VyY2VzIjpbIi9Vc2Vycy9yYWZhZWx0YXZhcmVzL1Byb2plY3RzL25nLXZpdmEtdWkvc3JjL3V0aWxzL3V0aWxzLmpzIiwiL1VzZXJzL3JhZmFlbHRhdmFyZXMvUHJvamVjdHMvbmctdml2YS11aS9zcmMvbW9kdWxlcy9tYWluL21haW4ubW9kdWxlLmpzIiwiL1VzZXJzL3JhZmFlbHRhdmFyZXMvUHJvamVjdHMvbmctdml2YS11aS9zcmMvbW9kdWxlcy9sYWJlbC9sYWJlbC5tb2R1bGUuanMiLCIvVXNlcnMvcmFmYWVsdGF2YXJlcy9Qcm9qZWN0cy9uZy12aXZhLXVpL3NyYy9tb2R1bGVzL2xhYmVsL2RpcmVjdGl2ZXMvZmxvYXRMYWJlbC9mbG9hdExhYmVsLmRpcmVjdGl2ZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGhpZmVuMkNhbWVsQ2FzZTogKHN0ciwgY2FwaXRhbGl6ZSkgPT4ge1xuICAgIGNvbnN0IHN0clBpZWNlcyA9IHN0ci5zcGxpdCgnLScpXG4gICAgc3RyUGllY2VzWzBdID0gc3RyUGllY2VzWzBdLmNoYXJBdCgwKVtjYXBpdGFsaXplID8gJ3RvVXBwZXJDYXNlJyA6ICd0b0xvd2VyQ2FzZSddKCkgKyBzdHJQaWVjZXNbMF0uc2xpY2UoMSlcblxuICAgIHJldHVybiBzdHJQaWVjZXNbMF0gKyBzdHJQaWVjZXMuc2xpY2UoMSkubWFwKFxuICAgICAgICAocGllY2UpID0+IHtcbiAgICAgICAgICByZXR1cm4gcGllY2UuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBwaWVjZS5zbGljZSgxKVxuICAgICAgICB9XG4gICAgICApLmpvaW4oJycpXG4gIH1cbn1cbiIsImltcG9ydCBhbmd1bGFyIGZyb20gJ2FuZ3VsYXInXG5pbXBvcnQgeyBuYW1lIH0gZnJvbSAnLi4vLi4vLi4vcGFja2FnZS5qc29uJ1xuaW1wb3J0IHsgaGlmZW4yQ2FtZWxDYXNlIH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbHMnXG5cbmNvbnN0IG1vZHVsZU5hbWUgPSBoaWZlbjJDYW1lbENhc2UobmFtZSlcblxuLyoqXG4gKiBAbmdkb2Mgb3ZlcnZpZXdcbiAqIEBuYW1lIG5nVml2YVVpXG4gKiBAZGVzY3JpcHRpb25cbiAqICNuZ1ZpdmFVaVxuICogVml2YSBVaSBLaXQncyBpbXBsZW1lbnRhdGlvbiBmb3IgQW5ndWxhckpTLlxuICovXG5jb25zdCBtYWluTW9kdWxlID0gKCgpID0+IHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gYW5ndWxhci5tb2R1bGUobW9kdWxlTmFtZSlcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBhbmd1bGFyLm1vZHVsZShtb2R1bGVOYW1lLCBbXSlcbiAgfVxufSkoKVxuXG5leHBvcnQgeyBtYWluTW9kdWxlIGFzIGRlZmF1bHQsIG1vZHVsZU5hbWUgfVxuIiwiaW1wb3J0IGFuZ3VsYXIgZnJvbSAnYW5ndWxhcidcbmltcG9ydCB7IG1vZHVsZU5hbWUgYXMgbWFpbk1vZHVsZU5hbWUgfSBmcm9tICcuLi9tYWluL21haW4ubW9kdWxlJ1xuXG5jb25zdCBtb2R1bGVOYW1lID0gYCR7bWFpbk1vZHVsZU5hbWV9LmxhYmVsYFxuXG4vKipcbiAqIEBuZ2RvYyBvdmVydmlld1xuICogQG5hbWUgbmdWaXZhVWkubGFiZWxcbiAqIEByZXF1aXJlcyBuZ1ZpdmFVaVxuICogQGRlc2NyaXB0aW9uXG4gKiAjbmdWaXZhVWkubGFiZWxcbiAqIFZpdmEgVWkgS2l0J3MgbGFiZWwgaW1wbGVtZW50YXRpb24gZm9yIEFuZ3VsYXJKUy5cbiAqL1xuY29uc3QgbGFiZWxNb2R1bGUgPSAoKCkgPT4ge1xuICB0cnkge1xuICAgIHJldHVybiBhbmd1bGFyLm1vZHVsZShtb2R1bGVOYW1lKVxuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGFuZ3VsYXIubW9kdWxlKG1vZHVsZU5hbWUsIFttYWluTW9kdWxlTmFtZV0pXG4gIH1cbn0pKClcblxuZXhwb3J0IHsgbGFiZWxNb2R1bGUgYXMgZGVmYXVsdCwgbW9kdWxlTmFtZSB9XG4iLCJpbXBvcnQgRmxvYXRsIGZyb20gJ2Zsb2F0bCdcbmltcG9ydCBsYWJlbE1vZHVsZSBmcm9tICcuLi8uLi9sYWJlbC5tb2R1bGUnXG5pbXBvcnQgdGVtcGxhdGUgZnJvbSAnLi9mbG9hdExhYmVsLmh0bWwnXG5cbmNsYXNzIEZsb2F0TGFiZWxIYW5kbGVyIHtcbiAgY29uc3RydWN0b3IgKCRhdHRycywgJGlucHV0LCAkbGFiZWwsICRjdHJsKSB7XG4gICAgdGhpcy4kYXR0cnMgPSAkYXR0cnNcbiAgICB0aGlzLiRpbnB1dCA9ICRpbnB1dFxuICAgIHRoaXMuJGxhYmVsID0gJGxhYmVsXG4gICAgdGhpcy4kY3RybCA9ICRjdHJsXG5cbiAgICB0aGlzLnNldExhYmVsQ2xhc3MgPSB0aGlzLnNldExhYmVsQ2xhc3MuYmluZCh0aGlzKVxuICAgIHRoaXMuc2V0VGV4dCA9IHRoaXMuc2V0VGV4dC5iaW5kKHRoaXMpXG4gIH1cblxuICBzZXRMYWJlbENsYXNzIChsYWJlbENsYXNzKSB7XG4gICAgdGhpcy4kY3RybC5sYWJlbENsYXNzID0gbGFiZWxDbGFzc1xuICB9XG5cbiAgc2V0VGV4dCAoKSB7XG4gICAgdGhpcy4kbGFiZWwudGV4dCh0aGlzLiRhdHRycy5sYWJlbCB8fCB0aGlzLiRpbnB1dC5hdHRyKCdwbGFjZWhvbGRlcicpKVxuICB9XG59XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdWaXZhVWkubGFiZWwuZGlyZWN0aXZlOnZpdmFVaUZsb2F0TGFiZWxcbiAqIEByZXN0cmljdCBFXG4gKiBAc2NvcGVcbiAqIEBkZXNjcmlwdGlvbiBVSSBLaXQncyBmbG9hdCBsYWJlbCBpbXBsZW1lbnRhdGlvbi5cbiAqIEBleGFtcGxlXG4gICAgPGV4YW1wbGUgbW9kdWxlPVwibmdWaXZhVWkubGFiZWxcIj5cbiAgICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgIDxzdHlsZT5cbiAgICAgICAgICAubGl2ZS1leGFtcGxlIHtcbiAgICAgICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICAgICAgICAgIHdpZHRoOiAzMyU7XG4gICAgICAgICAgICB2ZXJ0aWNhbC1hbGlnbjogdG9wO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC5saXZlLWV4YW1wbGUgaW5wdXRbdHlwZT1cInRleHRcIl06Zm9jdXMge1xuICAgICAgICAgICAgYm94LXNoYWRvdzogbm9uZTtcbiAgICAgICAgICB9XG4gICAgICAgIDwvc3R5bGU+XG5cbiAgICAgICAgPGRpdiBjbGFzcz1cImxpdmUtZXhhbXBsZVwiPlxuICAgICAgICAgIDx2aXZhLXVpLWZsb2F0LWxhYmVsPlxuICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgdml2YS11aS1pbnB1dCBwbGFjZWhvbGRlcj1cIkZsb2F0IGxhYmVsXCI+XG4gICAgICAgICAgPC92aXZhLXVpLWZsb2F0LWxhYmVsPlxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8ZGl2IGNsYXNzPVwibGl2ZS1leGFtcGxlXCI+XG4gICAgICAgICAgPHZpdmEtdWktZmxvYXQtbGFiZWwgbGFiZWw9XCJJJ20gYSBsYWJlbFwiPlxuICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgdml2YS11aS1pbnB1dCBwbGFjZWhvbGRlcj1cIkknbSBhIHBsYWNlaG9sZGVyXCI+XG4gICAgICAgICAgPC92aXZhLXVpLWZsb2F0LWxhYmVsPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZmlsZT5cbiAgICA8L2V4YW1wbGU+XG4gKi9cbmxhYmVsTW9kdWxlLmRpcmVjdGl2ZSgndml2YVVpRmxvYXRMYWJlbCcsIFsnJGNvbXBpbGUnLCAoJGNvbXBpbGUpID0+IHtcbiAgcmV0dXJuIHtcbiAgICB0ZW1wbGF0ZSxcbiAgICByZXN0cmljdDogJ0UnLFxuICAgIHNjb3BlOiB7fSxcbiAgICB0cmFuc2NsdWRlOiB0cnVlLFxuICAgIGNvbnRyb2xsZXI6ICgpID0+IHt9LFxuICAgIGNvbnRyb2xsZXJBczogJyRmbG9hdExhYmVsJyxcbiAgICBsaW5rOiB7XG4gICAgICBwb3N0OiAoJHNjb3BlLCAkZWxlbWVudCwgJGF0dHJzLCAkY3RybCkgPT4ge1xuICAgICAgICBjb25zdCAkZmxvYXRMYWJlbENvbnRhaW5lciA9ICRlbGVtZW50LmNoaWxkcmVuKClcbiAgICAgICAgY29uc3QgJG5nVHJhc2NsdWRlVGFnID0gJGVsZW1lbnQuZmluZCgnbmctdHJhbnNjbHVkZScpXG5cbiAgICAgICAgY29uc3QgJGlucHV0ID0gJGVsZW1lbnQuZmluZCgnaW5wdXQnKVxuICAgICAgICBjb25zdCAkbGFiZWwgPSAkY29tcGlsZSgnPGxhYmVsIGNsYXNzPVwiZmxvYXRsX19sYWJlbFwiIG5nLWNsYXNzPVwiWyRmbG9hdExhYmVsLmxhYmVsQ2xhc3NdXCI+JykoJHNjb3BlKVxuXG4gICAgICAgIGNvbnN0IGhhbmRsZXIgPSBuZXcgRmxvYXRMYWJlbEhhbmRsZXIoJGF0dHJzLCAkaW5wdXQsICRsYWJlbCwgJGN0cmwpXG5cbiAgICAgICAgJGlucHV0LmFkZENsYXNzKCdmbG9hdGxfX2lucHV0JylcbiAgICAgICAgJGZsb2F0TGFiZWxDb250YWluZXJbMF0uaW5zZXJ0QmVmb3JlKCRsYWJlbFswXSwgJG5nVHJhc2NsdWRlVGFnWzBdKVxuXG4gICAgICAgICRhdHRycy4kb2JzZXJ2ZSgnbGFiZWxDbGFzcycsIGhhbmRsZXIuc2V0TGFiZWxDbGFzcylcbiAgICAgICAgJGF0dHJzLiRvYnNlcnZlKCdsYWJlbCcsIGhhbmRsZXIuc2V0VGV4dClcblxuICAgICAgICAkc2NvcGUuJHdhdGNoKFxuICAgICAgICAgICgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiAkaW5wdXQuYXR0cigncGxhY2Vob2xkZXInKVxuICAgICAgICAgIH0sXG4gICAgICAgICAgaGFuZGxlci5zZXRUZXh0XG4gICAgICAgIClcblxuICAgICAgICBGbG9hdGwuY2FsbChPYmplY3QuY3JlYXRlKEZsb2F0bC5wcm90b3R5cGUpLCAkZmxvYXRMYWJlbENvbnRhaW5lclswXSlcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1dKVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJzdHIiLCJjYXBpdGFsaXplIiwic3RyUGllY2VzIiwic3BsaXQiLCJjaGFyQXQiLCJzbGljZSIsIm1hcCIsInBpZWNlIiwidG9VcHBlckNhc2UiLCJqb2luIiwibW9kdWxlTmFtZSIsImhpZmVuMkNhbWVsQ2FzZSIsIm5hbWUiLCJhbmd1bGFyIiwiZSIsIm1haW5Nb2R1bGVOYW1lIiwibGFiZWxNb2R1bGUiLCJGbG9hdExhYmVsSGFuZGxlciIsIiRhdHRycyIsIiRpbnB1dCIsIiRsYWJlbCIsIiRjdHJsIiwic2V0TGFiZWxDbGFzcyIsInRoaXMiLCJiaW5kIiwic2V0VGV4dCIsImxhYmVsQ2xhc3MiLCJ0ZXh0IiwibGFiZWwiLCJhdHRyIiwiZGlyZWN0aXZlIiwiJGNvbXBpbGUiLCIkc2NvcGUiLCIkZWxlbWVudCIsIiRmbG9hdExhYmVsQ29udGFpbmVyIiwiY2hpbGRyZW4iLCIkbmdUcmFzY2x1ZGVUYWciLCJmaW5kIiwiaGFuZGxlciIsImFkZENsYXNzIiwiaW5zZXJ0QmVmb3JlIiwiJG9ic2VydmUiLCIkd2F0Y2giLCJjYWxsIiwiT2JqZWN0IiwiY3JlYXRlIiwiRmxvYXRsIiwicHJvdG90eXBlIl0sIm1hcHBpbmdzIjoidVJBRUFBLEVBQU9DLHlCQUNZLFNBQUNDLEVBQUtDLE1BQ2ZDLEdBQVlGLEVBQUlHLE1BQU0sY0FDbEIsR0FBS0QsRUFBVSxHQUFHRSxPQUFPLEdBQUdILEVBQWEsY0FBZ0IsaUJBQW1CQyxFQUFVLEdBQUdHLE1BQU0sR0FFbEdILEVBQVUsR0FBS0EsRUFBVUcsTUFBTSxHQUFHQyxJQUNyQyxTQUFDQyxTQUNRQSxHQUFNSCxPQUFPLEdBQUdJLGNBQWdCRCxFQUFNRixNQUFNLEtBRXJESSxLQUFLLHFDQ1BQQyxFQUFhQyxFQUFnQkMsR0NEN0JGLEdEVWMscUJBRVRHLEdBQVFmLE9BQU9ZLEdBQ3RCLE1BQU9JLFNBQ0FELEdBQVFmLE9BQU9ZLFVDZEpLLFlBVWhCQyxFQUFlLHFCQUVWSCxHQUFRZixPQUFPWSxHQUN0QixNQUFPSSxTQUNBRCxHQUFRZixPQUFPWSxHQUFhSyxrYUNiakNFLHdCQUNTQyxFQUFRQyxFQUFRQyxFQUFRQyxrQkFDOUJILE9BQVNBLE9BQ1RDLE9BQVNBLE9BQ1RDLE9BQVNBLE9BQ1RDLE1BQVFBLE9BRVJDLGNBQWdCQyxLQUFLRCxjQUFjRSxLQUFLRCxXQUN4Q0UsUUFBVUYsS0FBS0UsUUFBUUQsS0FBS0Qsc0RBR3BCRyxRQUNSTCxNQUFNSyxXQUFhQSx5Q0FJbkJOLE9BQU9PLEtBQUtKLEtBQUtMLE9BQU9VLE9BQVNMLEtBQUtKLE9BQU9VLEtBQUssK0JBdUMzRGIsR0FBWWMsVUFBVSxvQkFBcUIsV0FBWSxTQUFDQyw4QkFHMUMseUJBRUUsYUFDQSwwQkFDRSx5QkFFTixTQUFDQyxFQUFRQyxFQUFVZixFQUFRRyxNQUN6QmEsR0FBdUJELEVBQVNFLFdBQ2hDQyxFQUFrQkgsRUFBU0ksS0FBSyxpQkFFaENsQixFQUFTYyxFQUFTSSxLQUFLLFNBQ3ZCakIsRUFBU1csRUFBUyxxRUFBcUVDLEdBRXZGTSxFQUFVLEdBQUlyQixHQUFrQkMsRUFBUUMsRUFBUUMsRUFBUUMsS0FFdkRrQixTQUFTLG1CQUNLLEdBQUdDLGFBQWFwQixFQUFPLEdBQUlnQixFQUFnQixNQUV6REssU0FBUyxhQUFjSCxFQUFRaEIsaUJBQy9CbUIsU0FBUyxRQUFTSCxFQUFRYixXQUUxQmlCLE9BQ0wsaUJBQ1N2QixHQUFPVSxLQUFLLGdCQUVyQlMsRUFBUWIsV0FHSGtCLEtBQUtDLE9BQU9DLE9BQU9DLEVBQU9DLFdBQVliLEVBQXFCIn0=