"use strict";function _interopDefault(e){return e&&"object"==typeof e&&"default"in e?e.default:e}function interopDefault(e){return e&&"object"==typeof e&&"default"in e?e.default:e}function createCommonjsModule(e,t){return t={exports:{}},e(t,t.exports),t.exports}var angular=_interopDefault(require("angular")),Floatl=_interopDefault(require("floatl")),name="ng-viva-ui",utils=createCommonjsModule(function(e){e.exports={hifen2CamelCase:function(e,t){var l=e.split("-");return l[0]=l[0].charAt(0)[t?"toUpperCase":"toLowerCase"]()+l[0].slice(1),l[0]+l.slice(1).map(function(e){return e.charAt(0).toUpperCase()+e.slice(1)}).join("")}}});interopDefault(utils);var hifen2CamelCase=utils.hifen2CamelCase,moduleName$1=hifen2CamelCase(name),mainModule=function(){try{return angular.module(moduleName$1)}catch(e){return angular.module(moduleName$1,[])}}(),moduleName=moduleName$1+".label",labelModule=function(){try{return angular.module(moduleName)}catch(e){return angular.module(moduleName,[moduleName$1])}}(),template='<div class="floatl">\n  <ng-transclude></ng-transclude>\n</div>\n',classCallCheck=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},createClass=function(){function e(e,t){for(var l=0;l<t.length;l++){var a=t[l];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,l,a){return l&&e(t.prototype,l),a&&e(t,a),t}}(),FloatLabelHandler=function(){function e(t,l,a,n){classCallCheck(this,e),this.$attrs=t,this.$input=l,this.$label=a,this.$ctrl=n,this.setLabelClass=this.setLabelClass.bind(this),this.setText=this.setText.bind(this)}return createClass(e,[{key:"setLabelClass",value:function(e){this.$ctrl.labelClass=e}},{key:"setText",value:function(){this.$label.text(this.$attrs.label||this.$input.attr("placeholder"))}}]),e}();labelModule.directive("vivaUiFloatLabel",["$compile",function(e){return{template:template,restrict:"E",scope:{},transclude:!0,controller:function(){},controllerAs:"$floatLabel",link:{post:function(t,l,a,n){var r=l.children(),o=l.find("ng-transclude"),s=l.find("input"),u=e('<label class="floatl__label" ng-class="[$floatLabel.labelClass]">')(t),i=new FloatLabelHandler(a,s,u,n);s.addClass("floatl__input"),r[0].insertBefore(u[0],o[0]),a.$observe("labelClass",i.setLabelClass),a.$observe("label",i.setText),t.$watch(function(){return s.attr("placeholder")},i.setText),Floatl.call(Object.create(Floatl.prototype),r[0])}}}}]),module.exports=labelModule;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,