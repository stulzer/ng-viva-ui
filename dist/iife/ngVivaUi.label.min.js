var ngVivaUiLabel=function(t,e){"use strict";function n(t){return t&&"object"==typeof t&&"default"in t?t.default:t}function l(t,e){return e={exports:{}},t(e,e.exports),e.exports}t="default"in t?t.default:t,e="default"in e?e.default:e;var a="ng-viva-ui",r=l(function(t){t.exports={camelize:function(t,e){var n=t.split("-");return e="undefined"==typeof e?{}:e,n[0]=n[0].charAt(0)[e.capitalize?"toUpperCase":"toLowerCase"]()+n[0].slice(1),n[0]+n.slice(1).map(function(t){return t.charAt(0).toUpperCase()+t.slice(1)}).join("")}}});n(r);var i=r.camelize,s=i(a),o=(function(){try{return t.module(s)}catch(e){return t.module(s,[])}}(),s+".label"),u=function(){try{return t.module(o)}catch(e){return t.module(o,[s])}}(),c='<div class="floatl">\n  <ng-transclude></ng-transclude>\n</div>\n',f=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")},b=function(){function t(t,e){for(var n=0;n<e.length;n++){var l=e[n];l.enumerable=l.enumerable||!1,l.configurable=!0,"value"in l&&(l.writable=!0),Object.defineProperty(t,l.key,l)}}return function(e,n,l){return n&&t(e.prototype,n),l&&t(e,l),e}}(),d=function(){function t(e,n,l,a){f(this,t),this.$attrs=e,this.$input=n,this.$label=l,this.$ctrl=a,this.setLabelClass=this.setLabelClass.bind(this),this.setText=this.setText.bind(this)}return b(t,[{key:"setLabelClass",value:function(t){this.$ctrl.labelClass=t}},{key:"setText",value:function(){this.$label.text(this.$attrs.label||this.$input.attr("placeholder"))}}]),t}();return u.directive("vivaUiFloatLabel",["$compile",function(t){return{template:c,restrict:"E",scope:{},transclude:!0,controllerAs:"$uiFloatLabel",controller:function(){},link:{post:function(n,l,a,r){var i=l.children(),s=l.find("ng-transclude"),o=l.find("input"),u=t('<label class="floatl__label" ng-class="[$uiFloatLabel.labelClass]">')(n),c=new d(a,o,u,r);o.addClass("floatl__input"),i[0].insertBefore(u[0],s[0]),a.$observe("labelClass",c.setLabelClass),a.$observe("label",c.setText),n.$watch(function(){return o.attr("placeholder")},c.setText),e.call(Object.create(e.prototype),i[0])}}}}]),u}(angular,Floatl);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjpudWxsLCJzb3VyY2VzIjpbIi9Vc2Vycy9yYWZhZWx0YXZhcmVzL1Byb2plY3RzL25nLXZpdmEtdWkvc3JjL3V0aWxzL3V0aWxzLmpzIiwiL1VzZXJzL3JhZmFlbHRhdmFyZXMvUHJvamVjdHMvbmctdml2YS11aS9zcmMvbW9kdWxlcy9tYWluL21haW4ubW9kdWxlLmpzIiwiL1VzZXJzL3JhZmFlbHRhdmFyZXMvUHJvamVjdHMvbmctdml2YS11aS9zcmMvbW9kdWxlcy9sYWJlbC9sYWJlbC5tb2R1bGUuanMiLCIvVXNlcnMvcmFmYWVsdGF2YXJlcy9Qcm9qZWN0cy9uZy12aXZhLXVpL3NyYy9tb2R1bGVzL2xhYmVsL2RpcmVjdGl2ZXMvZmxvYXRMYWJlbC9mbG9hdExhYmVsLmRpcmVjdGl2ZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGNhbWVsaXplOiAoc3RyLCBvcHRpb25zKSA9PiB7XG4gICAgY29uc3Qgc3RyUGllY2VzID0gc3RyLnNwbGl0KCctJylcbiAgICBvcHRpb25zID0gdHlwZW9mIG9wdGlvbnMgPT09ICd1bmRlZmluZWQnID8ge30gOiBvcHRpb25zXG5cbiAgICBzdHJQaWVjZXNbMF0gPSBzdHJQaWVjZXNbMF0uY2hhckF0KDApW29wdGlvbnMuY2FwaXRhbGl6ZSA/ICd0b1VwcGVyQ2FzZScgOiAndG9Mb3dlckNhc2UnXSgpICsgc3RyUGllY2VzWzBdLnNsaWNlKDEpXG5cbiAgICByZXR1cm4gc3RyUGllY2VzWzBdICsgc3RyUGllY2VzLnNsaWNlKDEpLm1hcChcbiAgICAgICAgKHBpZWNlKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIHBpZWNlLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgcGllY2Uuc2xpY2UoMSlcbiAgICAgICAgfVxuICAgICAgKS5qb2luKCcnKVxuICB9XG59XG4iLCJpbXBvcnQgYW5ndWxhciBmcm9tICdhbmd1bGFyJ1xuaW1wb3J0IHsgbmFtZSB9IGZyb20gJy4uLy4uLy4uL3BhY2thZ2UuanNvbidcbmltcG9ydCB7IGNhbWVsaXplIH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbHMnXG5cbmNvbnN0IG1vZHVsZU5hbWUgPSBjYW1lbGl6ZShuYW1lKVxuXG4vKipcbiAqIEBuZ2RvYyBvdmVydmlld1xuICogQG5hbWUgbmdWaXZhVWlcbiAqIEBkZXNjcmlwdGlvblxuICogI25nVml2YVVpXG4gKiBWaXZhIFVpIEtpdCdzIGltcGxlbWVudGF0aW9uIGZvciBBbmd1bGFySlMuXG4gKi9cbmNvbnN0IG1haW5Nb2R1bGUgPSAoKCkgPT4ge1xuICB0cnkge1xuICAgIHJldHVybiBhbmd1bGFyLm1vZHVsZShtb2R1bGVOYW1lKVxuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGFuZ3VsYXIubW9kdWxlKG1vZHVsZU5hbWUsIFtdKVxuICB9XG59KSgpXG5cbmV4cG9ydCB7IG1haW5Nb2R1bGUgYXMgZGVmYXVsdCwgbW9kdWxlTmFtZSB9XG4iLCJpbXBvcnQgYW5ndWxhciBmcm9tICdhbmd1bGFyJ1xuaW1wb3J0IHsgbW9kdWxlTmFtZSBhcyBtYWluTW9kdWxlTmFtZSB9IGZyb20gJy4uL21haW4vbWFpbi5tb2R1bGUnXG5cbmNvbnN0IG1vZHVsZU5hbWUgPSBgJHttYWluTW9kdWxlTmFtZX0ubGFiZWxgXG5cbi8qKlxuICogQG5nZG9jIG92ZXJ2aWV3XG4gKiBAbmFtZSBuZ1ZpdmFVaS5sYWJlbFxuICogQHJlcXVpcmVzIG5nVml2YVVpXG4gKiBAZGVzY3JpcHRpb25cbiAqICNuZ1ZpdmFVaS5sYWJlbFxuICogVml2YSBVaSBLaXQncyBsYWJlbCBpbXBsZW1lbnRhdGlvbiBmb3IgQW5ndWxhckpTLlxuICovXG5jb25zdCBsYWJlbE1vZHVsZSA9ICgoKSA9PiB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGFuZ3VsYXIubW9kdWxlKG1vZHVsZU5hbWUpXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gYW5ndWxhci5tb2R1bGUobW9kdWxlTmFtZSwgW21haW5Nb2R1bGVOYW1lXSlcbiAgfVxufSkoKVxuXG5leHBvcnQgeyBsYWJlbE1vZHVsZSBhcyBkZWZhdWx0LCBtb2R1bGVOYW1lIH1cbiIsImltcG9ydCBGbG9hdGwgZnJvbSAnZmxvYXRsJ1xuaW1wb3J0IGxhYmVsTW9kdWxlIGZyb20gJy4uLy4uL2xhYmVsLm1vZHVsZSdcbmltcG9ydCB0ZW1wbGF0ZSBmcm9tICcuL2Zsb2F0TGFiZWwuaHRtbCdcblxuY2xhc3MgRmxvYXRMYWJlbEhhbmRsZXIge1xuICBjb25zdHJ1Y3RvciAoJGF0dHJzLCAkaW5wdXQsICRsYWJlbCwgJGN0cmwpIHtcbiAgICB0aGlzLiRhdHRycyA9ICRhdHRyc1xuICAgIHRoaXMuJGlucHV0ID0gJGlucHV0XG4gICAgdGhpcy4kbGFiZWwgPSAkbGFiZWxcbiAgICB0aGlzLiRjdHJsID0gJGN0cmxcblxuICAgIHRoaXMuc2V0TGFiZWxDbGFzcyA9IHRoaXMuc2V0TGFiZWxDbGFzcy5iaW5kKHRoaXMpXG4gICAgdGhpcy5zZXRUZXh0ID0gdGhpcy5zZXRUZXh0LmJpbmQodGhpcylcbiAgfVxuXG4gIHNldExhYmVsQ2xhc3MgKGxhYmVsQ2xhc3MpIHtcbiAgICB0aGlzLiRjdHJsLmxhYmVsQ2xhc3MgPSBsYWJlbENsYXNzXG4gIH1cblxuICBzZXRUZXh0ICgpIHtcbiAgICB0aGlzLiRsYWJlbC50ZXh0KHRoaXMuJGF0dHJzLmxhYmVsIHx8IHRoaXMuJGlucHV0LmF0dHIoJ3BsYWNlaG9sZGVyJykpXG4gIH1cbn1cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ1ZpdmFVaS5sYWJlbC5kaXJlY3RpdmU6dml2YVVpRmxvYXRMYWJlbFxuICogQHJlc3RyaWN0IEVcbiAqIEBzY29wZVxuICogQGRlc2NyaXB0aW9uIFVJIEtpdCdzIGZsb2F0IGxhYmVsIGltcGxlbWVudGF0aW9uLlxuICogQGV4YW1wbGVcbiAgICA8ZXhhbXBsZSBtb2R1bGU9XCJuZ1ZpdmFVaS5sYWJlbFwiPlxuICAgICAgPGZpbGUgbmFtZT1cImFwcC5odG1sXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJsaXZlLWV4YW1wbGVcIj5cbiAgICAgICAgICA8dml2YS11aS1mbG9hdC1sYWJlbD5cbiAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIHZpdmEtdWktaW5wdXQgcGxhY2Vob2xkZXI9XCJGbG9hdCBsYWJlbFwiPlxuICAgICAgICAgIDwvdml2YS11aS1mbG9hdC1sYWJlbD5cbiAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgPGRpdiBjbGFzcz1cImxpdmUtZXhhbXBsZVwiPlxuICAgICAgICAgIDx2aXZhLXVpLWZsb2F0LWxhYmVsIGxhYmVsPVwiSSdtIGEgbGFiZWxcIj5cbiAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIHZpdmEtdWktaW5wdXQgcGxhY2Vob2xkZXI9XCJJJ20gYSBwbGFjZWhvbGRlclwiPlxuICAgICAgICAgIDwvdml2YS11aS1mbG9hdC1sYWJlbD5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2ZpbGU+XG5cbiAgICAgIDxmaWxlIG5hbWU9XCJzdHlsZS5jc3NcIj5cbiAgICAgICAgLmxpdmUtZXhhbXBsZSB7XG4gICAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgICAgICAgIHdpZHRoOiAzMyU7XG4gICAgICAgICAgdmVydGljYWwtYWxpZ246IHRvcDtcbiAgICAgICAgfVxuXG4gICAgICAgIC5saXZlLWV4YW1wbGUgaW5wdXRbdHlwZT1cInRleHRcIl06Zm9jdXMge1xuICAgICAgICAgIGJveC1zaGFkb3c6IG5vbmU7XG4gICAgICAgIH1cbiAgICAgIDwvZmlsZT5cbiAgICA8L2V4YW1wbGU+XG4gKi9cbmxhYmVsTW9kdWxlLmRpcmVjdGl2ZSgndml2YVVpRmxvYXRMYWJlbCcsIFsnJGNvbXBpbGUnLCAoJGNvbXBpbGUpID0+IHtcbiAgcmV0dXJuIHtcbiAgICB0ZW1wbGF0ZSxcbiAgICByZXN0cmljdDogJ0UnLFxuICAgIHNjb3BlOiB7fSxcbiAgICB0cmFuc2NsdWRlOiB0cnVlLFxuICAgIGNvbnRyb2xsZXJBczogJyR1aUZsb2F0TGFiZWwnLFxuICAgIGNvbnRyb2xsZXI6IGZ1bmN0aW9uICgpIHt9LFxuICAgIGxpbms6IHtcbiAgICAgIHBvc3Q6ICgkc2NvcGUsICRlbGVtZW50LCAkYXR0cnMsICRjdHJsKSA9PiB7XG4gICAgICAgIGNvbnN0ICRmbG9hdExhYmVsQ29udGFpbmVyID0gJGVsZW1lbnQuY2hpbGRyZW4oKVxuICAgICAgICBjb25zdCAkbmdUcmFzY2x1ZGVUYWcgPSAkZWxlbWVudC5maW5kKCduZy10cmFuc2NsdWRlJylcblxuICAgICAgICBjb25zdCAkaW5wdXQgPSAkZWxlbWVudC5maW5kKCdpbnB1dCcpXG4gICAgICAgIGNvbnN0ICRsYWJlbCA9ICRjb21waWxlKCc8bGFiZWwgY2xhc3M9XCJmbG9hdGxfX2xhYmVsXCIgbmctY2xhc3M9XCJbJHVpRmxvYXRMYWJlbC5sYWJlbENsYXNzXVwiPicpKCRzY29wZSlcblxuICAgICAgICBjb25zdCBoYW5kbGVyID0gbmV3IEZsb2F0TGFiZWxIYW5kbGVyKCRhdHRycywgJGlucHV0LCAkbGFiZWwsICRjdHJsKVxuXG4gICAgICAgICRpbnB1dC5hZGRDbGFzcygnZmxvYXRsX19pbnB1dCcpXG4gICAgICAgICRmbG9hdExhYmVsQ29udGFpbmVyWzBdLmluc2VydEJlZm9yZSgkbGFiZWxbMF0sICRuZ1RyYXNjbHVkZVRhZ1swXSlcblxuICAgICAgICAkYXR0cnMuJG9ic2VydmUoJ2xhYmVsQ2xhc3MnLCBoYW5kbGVyLnNldExhYmVsQ2xhc3MpXG4gICAgICAgICRhdHRycy4kb2JzZXJ2ZSgnbGFiZWwnLCBoYW5kbGVyLnNldFRleHQpXG5cbiAgICAgICAgJHNjb3BlLiR3YXRjaChcbiAgICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gJGlucHV0LmF0dHIoJ3BsYWNlaG9sZGVyJylcbiAgICAgICAgICB9LFxuICAgICAgICAgIGhhbmRsZXIuc2V0VGV4dFxuICAgICAgICApXG5cbiAgICAgICAgRmxvYXRsLmNhbGwoT2JqZWN0LmNyZWF0ZShGbG9hdGwucHJvdG90eXBlKSwgJGZsb2F0TGFiZWxDb250YWluZXJbMF0pXG4gICAgICB9XG4gICAgfVxuICB9XG59XSlcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwic3RyIiwib3B0aW9ucyIsInN0clBpZWNlcyIsInNwbGl0IiwiY2hhckF0IiwiY2FwaXRhbGl6ZSIsInNsaWNlIiwibWFwIiwicGllY2UiLCJ0b1VwcGVyQ2FzZSIsImpvaW4iLCJtb2R1bGVOYW1lIiwiY2FtZWxpemUiLCJuYW1lIiwiYW5ndWxhciIsImUiLCJtYWluTW9kdWxlTmFtZSIsImxhYmVsTW9kdWxlIiwiRmxvYXRMYWJlbEhhbmRsZXIiLCIkYXR0cnMiLCIkaW5wdXQiLCIkbGFiZWwiLCIkY3RybCIsInNldExhYmVsQ2xhc3MiLCJ0aGlzIiwiYmluZCIsInNldFRleHQiLCJsYWJlbENsYXNzIiwidGV4dCIsImxhYmVsIiwiYXR0ciIsImRpcmVjdGl2ZSIsIiRjb21waWxlIiwiJHNjb3BlIiwiJGVsZW1lbnQiLCIkZmxvYXRMYWJlbENvbnRhaW5lciIsImNoaWxkcmVuIiwiJG5nVHJhc2NsdWRlVGFnIiwiZmluZCIsImhhbmRsZXIiLCJhZGRDbGFzcyIsImluc2VydEJlZm9yZSIsIiRvYnNlcnZlIiwiJHdhdGNoIiwiY2FsbCIsIk9iamVjdCIsImNyZWF0ZSIsIkZsb2F0bCIsInByb3RvdHlwZSJdLCJtYXBwaW5ncyI6IjZRQUVBQSxFQUFPQyxrQkFDSyxTQUFDQyxFQUFLQyxNQUNSQyxHQUFZRixFQUFJRyxNQUFNLGNBQ0MsbUJBQVpGLE1BQStCQSxJQUV0QyxHQUFLQyxFQUFVLEdBQUdFLE9BQU8sR0FBR0gsRUFBUUksV0FBYSxjQUFnQixpQkFBbUJILEVBQVUsR0FBR0ksTUFBTSxHQUUxR0osRUFBVSxHQUFLQSxFQUFVSSxNQUFNLEdBQUdDLElBQ3JDLFNBQUNDLFNBQ1FBLEdBQU1KLE9BQU8sR0FBR0ssY0FBZ0JELEVBQU1GLE1BQU0sS0FFckRJLEtBQUssOEJDVFBDLEVBQWFDLEVBQVNDLEdDRHRCRixHRFVjLHFCQUVURyxHQUFRaEIsT0FBT2EsR0FDdEIsTUFBT0ksU0FDQUQsR0FBUWhCLE9BQU9hLFVDZEpLLFlBVWhCQyxFQUFlLHFCQUVWSCxHQUFRaEIsT0FBT2EsR0FDdEIsTUFBT0ksU0FDQUQsR0FBUWhCLE9BQU9hLEdBQWFLLGthQ2JqQ0Usd0JBQ1NDLEVBQVFDLEVBQVFDLEVBQVFDLGtCQUM5QkgsT0FBU0EsT0FDVEMsT0FBU0EsT0FDVEMsT0FBU0EsT0FDVEMsTUFBUUEsT0FFUkMsY0FBZ0JDLEtBQUtELGNBQWNFLEtBQUtELFdBQ3hDRSxRQUFVRixLQUFLRSxRQUFRRCxLQUFLRCxzREFHcEJHLFFBQ1JMLE1BQU1LLFdBQWFBLHlDQUluQk4sT0FBT08sS0FBS0osS0FBS0wsT0FBT1UsT0FBU0wsS0FBS0osT0FBT1UsS0FBSywrQkF1QzNEYixHQUFZYyxVQUFVLG9CQUFxQixXQUFZLFNBQUNDLDhCQUcxQyx5QkFFRSxlQUNFLDJCQUNGLHdCQUVKLFNBQUNDLEVBQVFDLEVBQVVmLEVBQVFHLE1BQ3pCYSxHQUF1QkQsRUFBU0UsV0FDaENDLEVBQWtCSCxFQUFTSSxLQUFLLGlCQUVoQ2xCLEVBQVNjLEVBQVNJLEtBQUssU0FDdkJqQixFQUFTVyxFQUFTLHVFQUF1RUMsR0FFekZNLEVBQVUsR0FBSXJCLEdBQWtCQyxFQUFRQyxFQUFRQyxFQUFRQyxLQUV2RGtCLFNBQVMsbUJBQ0ssR0FBR0MsYUFBYXBCLEVBQU8sR0FBSWdCLEVBQWdCLE1BRXpESyxTQUFTLGFBQWNILEVBQVFoQixpQkFDL0JtQixTQUFTLFFBQVNILEVBQVFiLFdBRTFCaUIsT0FDTCxpQkFDU3ZCLEdBQU9VLEtBQUssZ0JBRXJCUyxFQUFRYixXQUdIa0IsS0FBS0MsT0FBT0MsT0FBT0MsRUFBT0MsV0FBWWIsRUFBcUIifQ==