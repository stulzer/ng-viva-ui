function interopDefault(n){return n&&"object"==typeof n&&"default"in n?n.default:n}function createCommonjsModule(n,e){return e={exports:{}},n(e,e.exports),e.exports}function insertStyle(){var n=document.head,e=n.children[0];n.insertBefore($uiStyle[0],e||null)}function applyStyle(e){var i=n.element(document.createTextNode(e));$uiStyle.append(i)}import n from"angular";var name="ng-viva-ui",utils=createCommonjsModule(function(n){"use strict";n.exports={camelize:function(n,e){var i=n.split("-");return e="undefined"==typeof e?{}:e,i[0]=i[0].charAt(0)[e.capitalize?"toUpperCase":"toLowerCase"]()+i[0].slice(1),i[0]+i.slice(1).map(function(n){return n.charAt(0).toUpperCase()+n.slice(1)}).join("")}}});interopDefault(utils);var camelize=utils.camelize,moduleName=camelize(name),mainModule=function(){try{return n.module(moduleName)}catch(e){return n.module(moduleName,[])}}(),$uiStyle=n.element('<style type="text/css">');mainModule.run(insertStyle);var template="<div ng-class=\"{'{{$uiCheckbox.classPrefix + '__container'}}': true, '{{$uiCheckbox.classPrefix + '__container--has-minus'}}': $uiCheckbox.hasMinusIcon}\">\n  <viva-ui-icon icon=\"check\" ng-class=\"[$uiCheckbox.classPrefix + '__check']\" ng-hide=\"$uiCheckbox.hasMinusIcon\"></viva-ui-icon>\n  <i ng-class=\"[$uiCheckbox.classPrefix + '__minus']\" ng-show=\"$uiCheckbox.hasMinusIcon\"></i>\n</div>",style="[viva-ui-checkbox] {\n  display: none; }\n\n.viva-ui-checkbox__container {\n  -o-transition: all 250ms ease-in-out;\n  -moz-transition: all 250ms ease-in-out;\n  -webkit-transition: all 250ms ease-in-out;\n  transition: all 250ms ease-in-out;\n  background-color: #ffffff;\n  box-sizing: border-box;\n  display: inline-block;\n  color: #ffffff;\n  border: 1px solid rgba(0, 0, 0, 0.38);\n  border-radius: 2px;\n  width: 16px;\n  height: 16px;\n  position: relative; }\n\n.viva-ui-checkbox__container:hover,\n[viva-ui-checkbox]:checked + .viva-ui-checkbox__container.viva-ui-checkbox__container--has-minus:hover {\n  border-color: #00acff; }\n\n.viva-ui-checkbox__check {\n  -ms-user-select: none;\n  -moz-user-select: none;\n  -webkit-user-select: none;\n  user-select: none;\n  box-sizing: border-box;\n  line-height: 0;\n  opacity: 0;\n  padding: 0px 1px;\n  width: 100%;\n  height: 100%; }\n\n.viva-ui-checkbox__minus {\n  opacity: 0;\n  background-color: rgba(0, 0, 0, 0.38);\n  display: inline-block;\n  position: absolute;\n  height: 2px;\n  top: calc(50% - 1px);\n  left: 2px;\n  right: 2px; }\n\n[viva-ui-checkbox]:checked + .viva-ui-checkbox__container {\n  background-color: #00acff;\n  border-color: #00acff; }\n  [viva-ui-checkbox]:checked + .viva-ui-checkbox__container.viva-ui-checkbox__container--has-minus {\n    background-color: #ffffff;\n    border-color: rgba(0, 0, 0, 0.38); }\n  [viva-ui-checkbox]:checked + .viva-ui-checkbox__container .viva-ui-checkbox__check, [viva-ui-checkbox]:checked + .viva-ui-checkbox__container .viva-ui-checkbox__minus {\n    opacity: 1; }\n\n[viva-ui-checkbox]:disabled + .viva-ui-checkbox__container,\n[viva-ui-checkbox]:disabled:checked + .viva-ui-checkbox__container {\n  color: rgba(0, 0, 0, 0.38);\n  background-color: #eeeeee;\n  border-color: rgba(0, 0, 0, 0.12); }\n",arrow='<svg width="8px" height="12px" viewBox="0 0 8 12" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">\n  <g stroke="none" stroke-width="1" fill="currentcolor" fill-rule="evenodd">\n    <g transform="translate(-75.000000, -228.000000)">\n      <g transform="translate(64.000000, 216.000000)">\n        <g transform="translate(4.000000, 6.000000)">\n          <polyline transform="translate(11.333333, 12.000000) scale(1, -1) rotate(-90.000000) translate(-11.333333, -12.000000) " points="6.73333333 15.6666667 11.3333333 11.108 15.9333333 15.6666667 17.3333333 14.2793333 11.3333333 8.33333333 5.33333333 14.2793333 6.73333333 15.6666667"></polyline>\n        </g>\n      </g>\n    </g>\n  </g>\n</svg>',check='<svg width="12px" height="10px" viewBox="0 0 12 10" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">\n  <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">\n    <g transform="translate(-367.000000, -295.000000)" fill="currentcolor">\n      <g transform="translate(365.000000, 292.000000)">\n        <g transform="translate(0.000000, 0.000000)">\n          <polygon id="Rectangle-34-Copy" points="6 13 2 8.83333333 3.6 7.16666667 6 9.66666667 12.4 3 14 4.66666667"></polygon>\n        </g>\n      </g>\n    </g>\n  </g>\n</svg>',uiIconset=Object.freeze({arrow:arrow,check:check}),style$1="viva-ui-icon {\n  display: inline-block; }\n  viva-ui-icon > svg {\n    width: 100%;\n    height: 100%; }\n";mainModule.directive("vivaUiIcon",function(){return applyStyle(style$1),{restrict:"E",link:function(n,e,i){i.$observe("icon",function(n){var i=uiIconset[n];return i?void e.html(i):void e.empty()})}}});var classCallCheck=function(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")},createClass=function(){function n(n,e){for(var i=0;i<e.length;i++){var t=e[i];t.enumerable=t.enumerable||!1,t.configurable=!0,"value"in t&&(t.writable=!0),Object.defineProperty(n,t.key,t)}}return function(e,i,t){return i&&n(e.prototype,i),t&&n(e,t),e}}(),CheckboxHandler=function(){function n(e,i,t,o,a){classCallCheck(this,n),this.$scope=e,this.$element=i,this.$attrs=t,this.$ngModel=o,this.$uiCheckbox=a}return createClass(n,[{key:"onClick",value:function(){var n=this.$element[0],e=n.disabled;if(!e){var i=n.checked,t=!this.$attrs.hasOwnProperty("ngTrueValue")||this.$scope.$eval(this.$attrs.ngTrueValue),o=!!this.$attrs.hasOwnProperty("ngFalseValue")&&this.$scope.$eval(this.$attrs.ngFalseValue),a=i?o:t;this.$ngModel.$setViewValue(a),this.$ngModel.$render()}}}]),n}();mainModule.directive("vivaUiCheckbox",["$compile",function(n){return applyStyle(style),{restrict:"A",require:"ngModel",link:function(e,i,t,o){var a=e.$new(!0),r=a.$uiCheckbox={};r.classPrefix="viva-ui-checkbox";var c=n(template)(a),l=new CheckboxHandler(e,i,t,o,r);i.after(c),t.$observe("vivaUiCheckbox",function(n){r.hasMinusIcon="minus"===n}),c.bind("click",function(){l.onClick();var n=t.ngClick;if(n){var e=new window.MouseEvent("click",{bubbles:!0,cancelable:!0});i[0].dispatchEvent(e)}})}}}]);var style$2='[viva-ui-flat-button] {\n  -o-transition: all 250ms ease-in-out;\n  -moz-transition: all 250ms ease-in-out;\n  -webkit-transition: all 250ms ease-in-out;\n  transition: all 250ms ease-in-out;\n  border: none;\n  background-color: transparent;\n  border-radius: 2px;\n  color: #00acff;\n  font-size: 16px;\n  font-family: \'Open Sans\', sans-serif;\n  font-weight: 600;\n  padding: 0 16px;\n  text-align: center;\n  min-height: 48px;\n  min-width: 16px;\n  outline: none; }\n  [viva-ui-flat-button]:hover {\n    cursor: pointer; }\n  [viva-ui-flat-button]:active {\n    background-color: rgba(0, 172, 255, 0.1); }\n  [viva-ui-flat-button]:disabled {\n    color: rgba(0, 0, 0, 0.38); }\n\n[viva-ui-flat-button="small"] {\n  font-size: 13px;\n  min-height: 36px;\n  text-transform: uppercase; }\n\n[viva-ui-flat-button="large"] {\n  min-height: 56px; }\n';mainModule.directive("vivaUiFlatButton",function(){return applyStyle(style$2),{restrict:"A"}});export default mainModule;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,